#include <stdio.h>
#include <stdlib.h>

typedef struct nodo{
	int destino;
	int valor;
	struct nodo *prox;
}Nodo;


//complex O(n+a) teoricamente
void ordenacaoTopoLadj(Nodo *nodos,int nvert){
	//não prevê ciclos no grafo
	//mais eficiente do que com matriz
	
	int lista[nvert] = {-1};
	int contLista=0;
	int grau[nvert] = {0};
	
	Nodo atual;
	
	//encontrar o grau de todos os vertices
	for(int i = 0;i<nvert;i++){
		atual = nodos[i]
		while(atual !=null){
		
		int cont=0;
		grau[atual.destino]++;
		}
	}
		

	
	//adicionar graus nulos na lista
	for(int i = 0;i<nvert;i++){
		if(grau[i] == 0)
		lista[cont++] = atual.id;
	}
	
	
	while(contLista != 0){//talvez os vertices possam entrar de novo na lista, verificar
		int nodoatual = lista[contlista--]
		Nodo v = nodos[nodoatual]//pegar o ultimo por conveniencia
		while(v != NULL){
			grau[v.destino]--;
			if(grau[v.destino] == 0) 
				lista[++contLista] = v.destino
		}
	}
	
	
	
}


void ordenacaoTopoMatriz(int **g,int nvert){
	//não prevê ciclos no grafo
	
	int lista[nvert] = {-1};
	int contLista=0;
	int grau[nvert] = {0};
	
	//indeficiente
	for(int j = 0;j<nvert;j++){
		int cont=0;
		for(int i=0;i<nvert;i++){
			if(g[i][j] > 0)
			cont++;
		}
		grau[j] = cont;
		if(grau[j] == 0)
			lista[contLista] = j;
	}
	
	while(contLista != 0){
		int v = lista[contlista--]//pegar o ultimo por conveniencia
		for(int i=0;i<nvert;i++){
			if(g[v][i] > 0)
				grau[i]--;
		}
		if(grau[i] == 0)
			lista[++contLista] = i;
	}
		
}


